/**
 * API spending.gov.ua
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { PageResultDistributorDTO } from '../model/pageResultDistributorDTO';
import { PageResultDocumentDTO } from '../model/pageResultDocumentDTO';
import { PagedRequestDistributorRequest } from '../model/pagedRequestDistributorRequest';
import { PagedRequestVoid } from '../model/pagedRequestVoid';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class PageableDisposersService {

    protected basePath = 'https://api.spending.gov.ua/api';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Get disposer (page)
     * 
     * @param request request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDisposersUsingPOST(request: PagedRequestDistributorRequest, observe?: 'body', reportProgress?: boolean): Observable<PageResultDistributorDTO>;
    public getDisposersUsingPOST(request: PagedRequestDistributorRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PageResultDistributorDTO>>;
    public getDisposersUsingPOST(request: PagedRequestDistributorRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PageResultDistributorDTO>>;
    public getDisposersUsingPOST(request: PagedRequestDistributorRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling getDisposersUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<PageResultDistributorDTO>(`${this.basePath}/v2/disposers/page`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get page of documents
     * 
     * @param docType docType
     * @param X_FILTER_DATA X-FILTER-DATA
     * @param documentId Ідентифікатор документу
     * @param disposerId ЄДРПОУ розпорядника
     * @param contractorId ЄДРПОУ контрагента
     * @param currency Валюта
     * @param names Назва контрагента
     * @param documentDateFrom Діапазон пошуку за датою документа (дата з, включно)
     * @param documentDateTo Діапазон пошуку за датою документа (дата по, включно)
     * @param signDateFrom Діапазон пошуку за датою підпису документа (дата з, включно)
     * @param signDateTo Діапазон пошуку за датою підпису документа (дата по, включно)
     * @param amountFrom Діапазон пошуку по сумі (сума з, включно)
     * @param amountTo Діапазон пошуку по сумі (сума по, включно)
     * @param documentNumber Номер документу. При пошуку за номером документу необхідно вказати ЄДРПОУ розпорядника
     * @param version Наявність версій
     * @param page Номер сторінки
     * @param pageSize Кількість елементів на сторінці
     * @param enabledInDateFrom Пошук за діапазоном дії договору (дата з, включно)
     * @param enabledInDateTo Пошук за діапазоном дії договору (дата по, включно)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDocUsingGET(docType: string, X_FILTER_DATA?: string, documentId?: Array<string>, disposerId?: Array<string>, contractorId?: Array<string>, currency?: Array<string>, names?: Array<string>, documentDateFrom?: Date, documentDateTo?: Date, signDateFrom?: Date, signDateTo?: Date, amountFrom?: number, amountTo?: number, documentNumber?: string, version?: boolean, page?: number, pageSize?: number, enabledInDateFrom?: Date, enabledInDateTo?: Date, observe?: 'body', reportProgress?: boolean): Observable<PageResultDocumentDTO>;
    public getDocUsingGET(docType: string, X_FILTER_DATA?: string, documentId?: Array<string>, disposerId?: Array<string>, contractorId?: Array<string>, currency?: Array<string>, names?: Array<string>, documentDateFrom?: Date, documentDateTo?: Date, signDateFrom?: Date, signDateTo?: Date, amountFrom?: number, amountTo?: number, documentNumber?: string, version?: boolean, page?: number, pageSize?: number, enabledInDateFrom?: Date, enabledInDateTo?: Date, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PageResultDocumentDTO>>;
    public getDocUsingGET(docType: string, X_FILTER_DATA?: string, documentId?: Array<string>, disposerId?: Array<string>, contractorId?: Array<string>, currency?: Array<string>, names?: Array<string>, documentDateFrom?: Date, documentDateTo?: Date, signDateFrom?: Date, signDateTo?: Date, amountFrom?: number, amountTo?: number, documentNumber?: string, version?: boolean, page?: number, pageSize?: number, enabledInDateFrom?: Date, enabledInDateTo?: Date, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PageResultDocumentDTO>>;
    public getDocUsingGET(docType: string, X_FILTER_DATA?: string, documentId?: Array<string>, disposerId?: Array<string>, contractorId?: Array<string>, currency?: Array<string>, names?: Array<string>, documentDateFrom?: Date, documentDateTo?: Date, signDateFrom?: Date, signDateTo?: Date, amountFrom?: number, amountTo?: number, documentNumber?: string, version?: boolean, page?: number, pageSize?: number, enabledInDateFrom?: Date, enabledInDateTo?: Date, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (docType === null || docType === undefined) {
            throw new Error('Required parameter docType was null or undefined when calling getDocUsingGET.');
        }



















        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (documentId) {
            documentId.forEach((element) => {
                queryParameters = queryParameters.append('documentId', <any>element);
            })
        }
        if (disposerId) {
            disposerId.forEach((element) => {
                queryParameters = queryParameters.append('disposerId', <any>element);
            })
        }
        if (contractorId) {
            contractorId.forEach((element) => {
                queryParameters = queryParameters.append('contractorId', <any>element);
            })
        }
        if (currency) {
            currency.forEach((element) => {
                queryParameters = queryParameters.append('currency', <any>element);
            })
        }
        if (names) {
            names.forEach((element) => {
                queryParameters = queryParameters.append('names', <any>element);
            })
        }
        if (documentDateFrom !== undefined && documentDateFrom !== null) {
            queryParameters = queryParameters.set('documentDateFrom', <any>documentDateFrom.toISOString());
        }
        if (documentDateTo !== undefined && documentDateTo !== null) {
            queryParameters = queryParameters.set('documentDateTo', <any>documentDateTo.toISOString());
        }
        if (signDateFrom !== undefined && signDateFrom !== null) {
            queryParameters = queryParameters.set('signDateFrom', <any>signDateFrom.toISOString());
        }
        if (signDateTo !== undefined && signDateTo !== null) {
            queryParameters = queryParameters.set('signDateTo', <any>signDateTo.toISOString());
        }
        if (amountFrom !== undefined && amountFrom !== null) {
            queryParameters = queryParameters.set('amountFrom', <any>amountFrom);
        }
        if (amountTo !== undefined && amountTo !== null) {
            queryParameters = queryParameters.set('amountTo', <any>amountTo);
        }
        if (documentNumber !== undefined && documentNumber !== null) {
            queryParameters = queryParameters.set('documentNumber', <any>documentNumber);
        }
        if (version !== undefined && version !== null) {
            queryParameters = queryParameters.set('version', <any>version);
        }
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters = queryParameters.set('pageSize', <any>pageSize);
        }
        if (enabledInDateFrom !== undefined && enabledInDateFrom !== null) {
            queryParameters = queryParameters.set('enabledInDateFrom', <any>enabledInDateFrom.toISOString());
        }
        if (enabledInDateTo !== undefined && enabledInDateTo !== null) {
            queryParameters = queryParameters.set('enabledInDateTo', <any>enabledInDateTo.toISOString());
        }

        let headers = this.defaultHeaders;
        if (X_FILTER_DATA !== undefined && X_FILTER_DATA !== null) {
            headers = headers.set('X-FILTER-DATA', String(X_FILTER_DATA));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<PageResultDocumentDTO>(`${this.basePath}/v2/disposers/page/${encodeURIComponent(String(docType))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get disposer (page)
     * 
     * @param request request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getMinistriesUsingPOST(request: PagedRequestVoid, observe?: 'body', reportProgress?: boolean): Observable<PageResultDistributorDTO>;
    public getMinistriesUsingPOST(request: PagedRequestVoid, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PageResultDistributorDTO>>;
    public getMinistriesUsingPOST(request: PagedRequestVoid, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PageResultDistributorDTO>>;
    public getMinistriesUsingPOST(request: PagedRequestVoid, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling getMinistriesUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<PageResultDistributorDTO>(`${this.basePath}/v2/disposers/page/ministries`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Перевірка доступності API
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public pingUsingGET3(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public pingUsingGET3(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public pingUsingGET3(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public pingUsingGET3(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/v2/disposers/page/ping`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
