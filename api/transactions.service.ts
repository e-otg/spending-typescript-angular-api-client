/**
 * API spending.gov.ua
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { LastLoadDTO } from '../model/lastLoadDTO';
import { TopTransaction } from '../model/topTransaction';
import { TransactionDTO } from '../model/transactionDTO';
import { TransactionsPageDTO } from '../model/transactionsPageDTO';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class TransactionsService {

    protected basePath = 'https://api.spending.gov.ua/api';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Запит транcакцій
     * 
     * @param payersEdrpous Код платника
     * @param reciptEdrpous Код отримувача
     * @param regions Регіон
     * @param source Джерело даних
     * @param startdate Дата з
     * @param enddate Дата по
     * @param payerAccount Рахунок платника
     * @param reciptAccount Рахунок одержувача
     * @param sumFrom Сума від
     * @param sumTo Сума до
     * @param purpose Призначення платежу
     * @param payerName Назва платника
     * @param reciptName Назва одержувача
     * @param payerNameEdrpou Назва або ЄДРПОУ платника
     * @param reciptNameEdrpou Назва або ЄДРПОУ одержувача
     * @param page Сторінка
     * @param pageSize Записів на сторінці
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPageUsingGET1(payersEdrpous?: Array<string>, reciptEdrpous?: Array<string>, regions?: Array<number>, source?: 'UZ' | 'DKSU' | 'VPF', startdate?: Date, enddate?: Date, payerAccount?: string, reciptAccount?: string, sumFrom?: number, sumTo?: number, purpose?: string, payerName?: string, reciptName?: string, payerNameEdrpou?: string, reciptNameEdrpou?: string, page?: number, pageSize?: number, observe?: 'body', reportProgress?: boolean): Observable<TransactionsPageDTO>;
    public getPageUsingGET1(payersEdrpous?: Array<string>, reciptEdrpous?: Array<string>, regions?: Array<number>, source?: 'UZ' | 'DKSU' | 'VPF', startdate?: Date, enddate?: Date, payerAccount?: string, reciptAccount?: string, sumFrom?: number, sumTo?: number, purpose?: string, payerName?: string, reciptName?: string, payerNameEdrpou?: string, reciptNameEdrpou?: string, page?: number, pageSize?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TransactionsPageDTO>>;
    public getPageUsingGET1(payersEdrpous?: Array<string>, reciptEdrpous?: Array<string>, regions?: Array<number>, source?: 'UZ' | 'DKSU' | 'VPF', startdate?: Date, enddate?: Date, payerAccount?: string, reciptAccount?: string, sumFrom?: number, sumTo?: number, purpose?: string, payerName?: string, reciptName?: string, payerNameEdrpou?: string, reciptNameEdrpou?: string, page?: number, pageSize?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TransactionsPageDTO>>;
    public getPageUsingGET1(payersEdrpous?: Array<string>, reciptEdrpous?: Array<string>, regions?: Array<number>, source?: 'UZ' | 'DKSU' | 'VPF', startdate?: Date, enddate?: Date, payerAccount?: string, reciptAccount?: string, sumFrom?: number, sumTo?: number, purpose?: string, payerName?: string, reciptName?: string, payerNameEdrpou?: string, reciptNameEdrpou?: string, page?: number, pageSize?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


















        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (payersEdrpous) {
            payersEdrpous.forEach((element) => {
                queryParameters = queryParameters.append('payers_edrpous', <any>element);
            })
        }
        if (reciptEdrpous) {
            reciptEdrpous.forEach((element) => {
                queryParameters = queryParameters.append('recipt_edrpous', <any>element);
            })
        }
        if (regions) {
            regions.forEach((element) => {
                queryParameters = queryParameters.append('regions', <any>element);
            })
        }
        if (source !== undefined && source !== null) {
            queryParameters = queryParameters.set('source', <any>source);
        }
        if (startdate !== undefined && startdate !== null) {
            queryParameters = queryParameters.set('startdate', <any>startdate.toISOString());
        }
        if (enddate !== undefined && enddate !== null) {
            queryParameters = queryParameters.set('enddate', <any>enddate.toISOString());
        }
        if (payerAccount !== undefined && payerAccount !== null) {
            queryParameters = queryParameters.set('payer_account', <any>payerAccount);
        }
        if (reciptAccount !== undefined && reciptAccount !== null) {
            queryParameters = queryParameters.set('recipt_account', <any>reciptAccount);
        }
        if (sumFrom !== undefined && sumFrom !== null) {
            queryParameters = queryParameters.set('sumFrom', <any>sumFrom);
        }
        if (sumTo !== undefined && sumTo !== null) {
            queryParameters = queryParameters.set('sumTo', <any>sumTo);
        }
        if (purpose !== undefined && purpose !== null) {
            queryParameters = queryParameters.set('purpose', <any>purpose);
        }
        if (payerName !== undefined && payerName !== null) {
            queryParameters = queryParameters.set('payerName', <any>payerName);
        }
        if (reciptName !== undefined && reciptName !== null) {
            queryParameters = queryParameters.set('reciptName', <any>reciptName);
        }
        if (payerNameEdrpou !== undefined && payerNameEdrpou !== null) {
            queryParameters = queryParameters.set('payerNameEdrpou', <any>payerNameEdrpou);
        }
        if (reciptNameEdrpou !== undefined && reciptNameEdrpou !== null) {
            queryParameters = queryParameters.set('reciptNameEdrpou', <any>reciptNameEdrpou);
        }
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters = queryParameters.set('pageSize', <any>pageSize);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<TransactionsPageDTO>(`${this.basePath}/v2/api/transactions/page/`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Повертає Топ 100 транcакцій по регіону
     * 
     * @param region region
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTop100UsingGET(region?: Array<number>, observe?: 'body', reportProgress?: boolean): Observable<Array<TransactionDTO>>;
    public getTop100UsingGET(region?: Array<number>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TransactionDTO>>>;
    public getTop100UsingGET(region?: Array<number>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TransactionDTO>>>;
    public getTop100UsingGET(region?: Array<number>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (region) {
            region.forEach((element) => {
                queryParameters = queryParameters.append('region', <any>element);
            })
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/octet-stream',
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<TransactionDTO>>(`${this.basePath}/v2/api/transactions/top100`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Повертає Топ 5 транcакцій по Україні
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTop5UsingGET(observe?: 'body', reportProgress?: boolean): Observable<Array<TopTransaction>>;
    public getTop5UsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TopTransaction>>>;
    public getTop5UsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TopTransaction>>>;
    public getTop5UsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<TopTransaction>>(`${this.basePath}/v2/api/transactions/top5`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Запит транcакцій
     * 
     * @param disposer disposer
     * @param transactionId transactionId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTransactionDetailsUsingGET(disposer: string, transactionId: number, observe?: 'body', reportProgress?: boolean): Observable<TransactionDTO>;
    public getTransactionDetailsUsingGET(disposer: string, transactionId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TransactionDTO>>;
    public getTransactionDetailsUsingGET(disposer: string, transactionId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TransactionDTO>>;
    public getTransactionDetailsUsingGET(disposer: string, transactionId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (disposer === null || disposer === undefined) {
            throw new Error('Required parameter disposer was null or undefined when calling getTransactionDetailsUsingGET.');
        }

        if (transactionId === null || transactionId === undefined) {
            throw new Error('Required parameter transactionId was null or undefined when calling getTransactionDetailsUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<TransactionDTO>(`${this.basePath}/v2/api/transactions/${encodeURIComponent(String(disposer))}/${encodeURIComponent(String(transactionId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Повертає дані по транcакціях
     * 
     * @param payersEdrpous Код платника
     * @param reciptEdrpous Код отримувача
     * @param regions Регіон
     * @param source Джерело даних
     * @param startdate Дата з
     * @param enddate Дата по
     * @param payerAccount Рахунок платника
     * @param reciptAccount Рахунок одержувача
     * @param sumFrom Сума від
     * @param sumTo Сума до
     * @param purpose Призначення платежу
     * @param payerName Назва платника
     * @param reciptName Назва одержувача
     * @param payerNameEdrpou Назва або ЄДРПОУ платника
     * @param reciptNameEdrpou Назва або ЄДРПОУ одержувача
     * @param key key
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTransactionsByStreamUsingGET(payersEdrpous?: Array<string>, reciptEdrpous?: Array<string>, regions?: Array<number>, source?: 'UZ' | 'DKSU' | 'VPF', startdate?: Date, enddate?: Date, payerAccount?: string, reciptAccount?: string, sumFrom?: number, sumTo?: number, purpose?: string, payerName?: string, reciptName?: string, payerNameEdrpou?: string, reciptNameEdrpou?: string, key?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<TransactionDTO>>;
    public getTransactionsByStreamUsingGET(payersEdrpous?: Array<string>, reciptEdrpous?: Array<string>, regions?: Array<number>, source?: 'UZ' | 'DKSU' | 'VPF', startdate?: Date, enddate?: Date, payerAccount?: string, reciptAccount?: string, sumFrom?: number, sumTo?: number, purpose?: string, payerName?: string, reciptName?: string, payerNameEdrpou?: string, reciptNameEdrpou?: string, key?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TransactionDTO>>>;
    public getTransactionsByStreamUsingGET(payersEdrpous?: Array<string>, reciptEdrpous?: Array<string>, regions?: Array<number>, source?: 'UZ' | 'DKSU' | 'VPF', startdate?: Date, enddate?: Date, payerAccount?: string, reciptAccount?: string, sumFrom?: number, sumTo?: number, purpose?: string, payerName?: string, reciptName?: string, payerNameEdrpou?: string, reciptNameEdrpou?: string, key?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TransactionDTO>>>;
    public getTransactionsByStreamUsingGET(payersEdrpous?: Array<string>, reciptEdrpous?: Array<string>, regions?: Array<number>, source?: 'UZ' | 'DKSU' | 'VPF', startdate?: Date, enddate?: Date, payerAccount?: string, reciptAccount?: string, sumFrom?: number, sumTo?: number, purpose?: string, payerName?: string, reciptName?: string, payerNameEdrpou?: string, reciptNameEdrpou?: string, key?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

















        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (payersEdrpous) {
            payersEdrpous.forEach((element) => {
                queryParameters = queryParameters.append('payers_edrpous', <any>element);
            })
        }
        if (reciptEdrpous) {
            reciptEdrpous.forEach((element) => {
                queryParameters = queryParameters.append('recipt_edrpous', <any>element);
            })
        }
        if (regions) {
            regions.forEach((element) => {
                queryParameters = queryParameters.append('regions', <any>element);
            })
        }
        if (source !== undefined && source !== null) {
            queryParameters = queryParameters.set('source', <any>source);
        }
        if (startdate !== undefined && startdate !== null) {
            queryParameters = queryParameters.set('startdate', <any>startdate.toISOString());
        }
        if (enddate !== undefined && enddate !== null) {
            queryParameters = queryParameters.set('enddate', <any>enddate.toISOString());
        }
        if (payerAccount !== undefined && payerAccount !== null) {
            queryParameters = queryParameters.set('payer_account', <any>payerAccount);
        }
        if (reciptAccount !== undefined && reciptAccount !== null) {
            queryParameters = queryParameters.set('recipt_account', <any>reciptAccount);
        }
        if (sumFrom !== undefined && sumFrom !== null) {
            queryParameters = queryParameters.set('sumFrom', <any>sumFrom);
        }
        if (sumTo !== undefined && sumTo !== null) {
            queryParameters = queryParameters.set('sumTo', <any>sumTo);
        }
        if (purpose !== undefined && purpose !== null) {
            queryParameters = queryParameters.set('purpose', <any>purpose);
        }
        if (payerName !== undefined && payerName !== null) {
            queryParameters = queryParameters.set('payerName', <any>payerName);
        }
        if (reciptName !== undefined && reciptName !== null) {
            queryParameters = queryParameters.set('reciptName', <any>reciptName);
        }
        if (payerNameEdrpou !== undefined && payerNameEdrpou !== null) {
            queryParameters = queryParameters.set('payerNameEdrpou', <any>payerNameEdrpou);
        }
        if (reciptNameEdrpou !== undefined && reciptNameEdrpou !== null) {
            queryParameters = queryParameters.set('reciptNameEdrpou', <any>reciptNameEdrpou);
        }
        if (key !== undefined && key !== null) {
            queryParameters = queryParameters.set('key', <any>key);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/octet-stream',
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<TransactionDTO>>(`${this.basePath}/v2/api/transactions/`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Повертає дату останнього завантаження даних до БД API
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public lastLoadUsingGET1(observe?: 'body', reportProgress?: boolean): Observable<Array<LastLoadDTO>>;
    public lastLoadUsingGET1(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<LastLoadDTO>>>;
    public lastLoadUsingGET1(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<LastLoadDTO>>>;
    public lastLoadUsingGET1(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<LastLoadDTO>>(`${this.basePath}/v2/api/transactions/lastload`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Перевірка доступності API
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public pingUsingGET8(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public pingUsingGET8(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public pingUsingGET8(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public pingUsingGET8(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/v2/api/transactions/ping`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Запит транcакцій (page)
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public pingUsingGET9(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public pingUsingGET9(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public pingUsingGET9(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public pingUsingGET9(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/v2/api/transactions/page/ping`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
