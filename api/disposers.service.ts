/**
 * API spending.gov.ua
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { ActDTO } from '../model/actDTO';
import { AddendumDTO } from '../model/addendumDTO';
import { CheckSignRequestDTO } from '../model/checkSignRequestDTO';
import { ContractDTO } from '../model/contractDTO';
import { ContractWithSubdocumentsDTO } from '../model/contractWithSubdocumentsDTO';
import { DisposerStatDTO } from '../model/disposerStatDTO';
import { DocumentResultDTOActDTO } from '../model/documentResultDTOActDTO';
import { DocumentResultDTOAddendumDTO } from '../model/documentResultDTOAddendumDTO';
import { DocumentResultDTOContractDTO } from '../model/documentResultDTOContractDTO';
import { DocumentResultDTOPenyDTO } from '../model/documentResultDTOPenyDTO';
import { FileDTO } from '../model/fileDTO';
import { InputStreamResource } from '../model/inputStreamResource';
import { OrganizationDTO } from '../model/organizationDTO';
import { PenyDTO } from '../model/penyDTO';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class DisposersService {

    protected basePath = 'https://api.spending.gov.ua/api';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Get act by id
     * 
     * @param actId actId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getActUsingGET(actId: number, observe?: 'body', reportProgress?: boolean): Observable<ActDTO>;
    public getActUsingGET(actId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ActDTO>>;
    public getActUsingGET(actId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ActDTO>>;
    public getActUsingGET(actId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (actId === null || actId === undefined) {
            throw new Error('Required parameter actId was null or undefined when calling getActUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<ActDTO>(`${this.basePath}/v2/disposers/acts/${encodeURIComponent(String(actId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get acts of edrpou
     * 
     * @param documentId Ідентифікатор документу
     * @param disposerId ЄДРПОУ розпорядника
     * @param contractorId ЄДРПОУ контрагента
     * @param currency Валюта
     * @param names Назва контрагента
     * @param documentDateFrom Діапазон пошуку за датою документа (дата з, включно)
     * @param documentDateTo Діапазон пошуку за датою документа (дата по, включно)
     * @param signDateFrom Діапазон пошуку за датою підпису документа (дата з, включно)
     * @param signDateTo Діапазон пошуку за датою підпису документа (дата по, включно)
     * @param amountFrom Діапазон пошуку по сумі (сума з, включно)
     * @param amountTo Діапазон пошуку по сумі (сума по, включно)
     * @param documentNumber Номер документу. При пошуку за номером документу необхідно вказати ЄДРПОУ розпорядника
     * @param version Наявність версій
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getActsUsingGET(documentId?: Array<string>, disposerId?: Array<string>, contractorId?: Array<string>, currency?: Array<string>, names?: Array<string>, documentDateFrom?: Date, documentDateTo?: Date, signDateFrom?: Date, signDateTo?: Date, amountFrom?: number, amountTo?: number, documentNumber?: string, version?: boolean, observe?: 'body', reportProgress?: boolean): Observable<DocumentResultDTOActDTO>;
    public getActsUsingGET(documentId?: Array<string>, disposerId?: Array<string>, contractorId?: Array<string>, currency?: Array<string>, names?: Array<string>, documentDateFrom?: Date, documentDateTo?: Date, signDateFrom?: Date, signDateTo?: Date, amountFrom?: number, amountTo?: number, documentNumber?: string, version?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DocumentResultDTOActDTO>>;
    public getActsUsingGET(documentId?: Array<string>, disposerId?: Array<string>, contractorId?: Array<string>, currency?: Array<string>, names?: Array<string>, documentDateFrom?: Date, documentDateTo?: Date, signDateFrom?: Date, signDateTo?: Date, amountFrom?: number, amountTo?: number, documentNumber?: string, version?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DocumentResultDTOActDTO>>;
    public getActsUsingGET(documentId?: Array<string>, disposerId?: Array<string>, contractorId?: Array<string>, currency?: Array<string>, names?: Array<string>, documentDateFrom?: Date, documentDateTo?: Date, signDateFrom?: Date, signDateTo?: Date, amountFrom?: number, amountTo?: number, documentNumber?: string, version?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {














        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (documentId) {
            documentId.forEach((element) => {
                queryParameters = queryParameters.append('documentId', <any>element);
            })
        }
        if (disposerId) {
            disposerId.forEach((element) => {
                queryParameters = queryParameters.append('disposerId', <any>element);
            })
        }
        if (contractorId) {
            contractorId.forEach((element) => {
                queryParameters = queryParameters.append('contractorId', <any>element);
            })
        }
        if (currency) {
            currency.forEach((element) => {
                queryParameters = queryParameters.append('currency', <any>element);
            })
        }
        if (names) {
            names.forEach((element) => {
                queryParameters = queryParameters.append('names', <any>element);
            })
        }
        if (documentDateFrom !== undefined && documentDateFrom !== null) {
            queryParameters = queryParameters.set('documentDateFrom', <any>documentDateFrom.toISOString());
        }
        if (documentDateTo !== undefined && documentDateTo !== null) {
            queryParameters = queryParameters.set('documentDateTo', <any>documentDateTo.toISOString());
        }
        if (signDateFrom !== undefined && signDateFrom !== null) {
            queryParameters = queryParameters.set('signDateFrom', <any>signDateFrom.toISOString());
        }
        if (signDateTo !== undefined && signDateTo !== null) {
            queryParameters = queryParameters.set('signDateTo', <any>signDateTo.toISOString());
        }
        if (amountFrom !== undefined && amountFrom !== null) {
            queryParameters = queryParameters.set('amountFrom', <any>amountFrom);
        }
        if (amountTo !== undefined && amountTo !== null) {
            queryParameters = queryParameters.set('amountTo', <any>amountTo);
        }
        if (documentNumber !== undefined && documentNumber !== null) {
            queryParameters = queryParameters.set('documentNumber', <any>documentNumber);
        }
        if (version !== undefined && version !== null) {
            queryParameters = queryParameters.set('version', <any>version);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<DocumentResultDTOActDTO>(`${this.basePath}/v2/disposers/acts`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get addendums of edrpou
     * 
     * @param documentId Ідентифікатор документу
     * @param disposerId ЄДРПОУ розпорядника
     * @param contractorId ЄДРПОУ контрагента
     * @param currency Валюта
     * @param names Назва контрагента
     * @param documentDateFrom Діапазон пошуку за датою документа (дата з, включно)
     * @param documentDateTo Діапазон пошуку за датою документа (дата по, включно)
     * @param signDateFrom Діапазон пошуку за датою підпису документа (дата з, включно)
     * @param signDateTo Діапазон пошуку за датою підпису документа (дата по, включно)
     * @param amountFrom Діапазон пошуку по сумі (сума з, включно)
     * @param amountTo Діапазон пошуку по сумі (сума по, включно)
     * @param documentNumber Номер документу. При пошуку за номером документу необхідно вказати ЄДРПОУ розпорядника
     * @param version Наявність версій
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAddendsUsingGET(documentId?: Array<string>, disposerId?: Array<string>, contractorId?: Array<string>, currency?: Array<string>, names?: Array<string>, documentDateFrom?: Date, documentDateTo?: Date, signDateFrom?: Date, signDateTo?: Date, amountFrom?: number, amountTo?: number, documentNumber?: string, version?: boolean, observe?: 'body', reportProgress?: boolean): Observable<DocumentResultDTOAddendumDTO>;
    public getAddendsUsingGET(documentId?: Array<string>, disposerId?: Array<string>, contractorId?: Array<string>, currency?: Array<string>, names?: Array<string>, documentDateFrom?: Date, documentDateTo?: Date, signDateFrom?: Date, signDateTo?: Date, amountFrom?: number, amountTo?: number, documentNumber?: string, version?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DocumentResultDTOAddendumDTO>>;
    public getAddendsUsingGET(documentId?: Array<string>, disposerId?: Array<string>, contractorId?: Array<string>, currency?: Array<string>, names?: Array<string>, documentDateFrom?: Date, documentDateTo?: Date, signDateFrom?: Date, signDateTo?: Date, amountFrom?: number, amountTo?: number, documentNumber?: string, version?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DocumentResultDTOAddendumDTO>>;
    public getAddendsUsingGET(documentId?: Array<string>, disposerId?: Array<string>, contractorId?: Array<string>, currency?: Array<string>, names?: Array<string>, documentDateFrom?: Date, documentDateTo?: Date, signDateFrom?: Date, signDateTo?: Date, amountFrom?: number, amountTo?: number, documentNumber?: string, version?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {














        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (documentId) {
            documentId.forEach((element) => {
                queryParameters = queryParameters.append('documentId', <any>element);
            })
        }
        if (disposerId) {
            disposerId.forEach((element) => {
                queryParameters = queryParameters.append('disposerId', <any>element);
            })
        }
        if (contractorId) {
            contractorId.forEach((element) => {
                queryParameters = queryParameters.append('contractorId', <any>element);
            })
        }
        if (currency) {
            currency.forEach((element) => {
                queryParameters = queryParameters.append('currency', <any>element);
            })
        }
        if (names) {
            names.forEach((element) => {
                queryParameters = queryParameters.append('names', <any>element);
            })
        }
        if (documentDateFrom !== undefined && documentDateFrom !== null) {
            queryParameters = queryParameters.set('documentDateFrom', <any>documentDateFrom.toISOString());
        }
        if (documentDateTo !== undefined && documentDateTo !== null) {
            queryParameters = queryParameters.set('documentDateTo', <any>documentDateTo.toISOString());
        }
        if (signDateFrom !== undefined && signDateFrom !== null) {
            queryParameters = queryParameters.set('signDateFrom', <any>signDateFrom.toISOString());
        }
        if (signDateTo !== undefined && signDateTo !== null) {
            queryParameters = queryParameters.set('signDateTo', <any>signDateTo.toISOString());
        }
        if (amountFrom !== undefined && amountFrom !== null) {
            queryParameters = queryParameters.set('amountFrom', <any>amountFrom);
        }
        if (amountTo !== undefined && amountTo !== null) {
            queryParameters = queryParameters.set('amountTo', <any>amountTo);
        }
        if (documentNumber !== undefined && documentNumber !== null) {
            queryParameters = queryParameters.set('documentNumber', <any>documentNumber);
        }
        if (version !== undefined && version !== null) {
            queryParameters = queryParameters.set('version', <any>version);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<DocumentResultDTOAddendumDTO>(`${this.basePath}/v2/disposers/addendums`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get addendum by id
     * 
     * @param addendumId addendumId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAddendumUsingGET(addendumId: number, observe?: 'body', reportProgress?: boolean): Observable<AddendumDTO>;
    public getAddendumUsingGET(addendumId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AddendumDTO>>;
    public getAddendumUsingGET(addendumId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AddendumDTO>>;
    public getAddendumUsingGET(addendumId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (addendumId === null || addendumId === undefined) {
            throw new Error('Required parameter addendumId was null or undefined when calling getAddendumUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<AddendumDTO>(`${this.basePath}/v2/disposers/addendums/${encodeURIComponent(String(addendumId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get agreements of edrpou
     * 
     * @param documentId Ідентифікатор документу
     * @param disposerId ЄДРПОУ розпорядника
     * @param contractorId ЄДРПОУ контрагента
     * @param currency Валюта
     * @param names Назва контрагента
     * @param documentDateFrom Діапазон пошуку за датою документа (дата з, включно)
     * @param documentDateTo Діапазон пошуку за датою документа (дата по, включно)
     * @param signDateFrom Діапазон пошуку за датою підпису документа (дата з, включно)
     * @param signDateTo Діапазон пошуку за датою підпису документа (дата по, включно)
     * @param amountFrom Діапазон пошуку по сумі (сума з, включно)
     * @param amountTo Діапазон пошуку по сумі (сума по, включно)
     * @param documentNumber Номер документу. При пошуку за номером документу необхідно вказати ЄДРПОУ розпорядника
     * @param version Наявність версій
     * @param enabledInDateFrom Пошук за діапазоном дії договору (дата з, включно)
     * @param enabledInDateTo Пошук за діапазоном дії договору (дата по, включно)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAgreementsUsingGET(documentId?: Array<string>, disposerId?: Array<string>, contractorId?: Array<string>, currency?: Array<string>, names?: Array<string>, documentDateFrom?: Date, documentDateTo?: Date, signDateFrom?: Date, signDateTo?: Date, amountFrom?: number, amountTo?: number, documentNumber?: string, version?: boolean, enabledInDateFrom?: Date, enabledInDateTo?: Date, observe?: 'body', reportProgress?: boolean): Observable<DocumentResultDTOContractDTO>;
    public getAgreementsUsingGET(documentId?: Array<string>, disposerId?: Array<string>, contractorId?: Array<string>, currency?: Array<string>, names?: Array<string>, documentDateFrom?: Date, documentDateTo?: Date, signDateFrom?: Date, signDateTo?: Date, amountFrom?: number, amountTo?: number, documentNumber?: string, version?: boolean, enabledInDateFrom?: Date, enabledInDateTo?: Date, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DocumentResultDTOContractDTO>>;
    public getAgreementsUsingGET(documentId?: Array<string>, disposerId?: Array<string>, contractorId?: Array<string>, currency?: Array<string>, names?: Array<string>, documentDateFrom?: Date, documentDateTo?: Date, signDateFrom?: Date, signDateTo?: Date, amountFrom?: number, amountTo?: number, documentNumber?: string, version?: boolean, enabledInDateFrom?: Date, enabledInDateTo?: Date, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DocumentResultDTOContractDTO>>;
    public getAgreementsUsingGET(documentId?: Array<string>, disposerId?: Array<string>, contractorId?: Array<string>, currency?: Array<string>, names?: Array<string>, documentDateFrom?: Date, documentDateTo?: Date, signDateFrom?: Date, signDateTo?: Date, amountFrom?: number, amountTo?: number, documentNumber?: string, version?: boolean, enabledInDateFrom?: Date, enabledInDateTo?: Date, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
















        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (documentId) {
            documentId.forEach((element) => {
                queryParameters = queryParameters.append('documentId', <any>element);
            })
        }
        if (disposerId) {
            disposerId.forEach((element) => {
                queryParameters = queryParameters.append('disposerId', <any>element);
            })
        }
        if (contractorId) {
            contractorId.forEach((element) => {
                queryParameters = queryParameters.append('contractorId', <any>element);
            })
        }
        if (currency) {
            currency.forEach((element) => {
                queryParameters = queryParameters.append('currency', <any>element);
            })
        }
        if (names) {
            names.forEach((element) => {
                queryParameters = queryParameters.append('names', <any>element);
            })
        }
        if (documentDateFrom !== undefined && documentDateFrom !== null) {
            queryParameters = queryParameters.set('documentDateFrom', <any>documentDateFrom.toISOString());
        }
        if (documentDateTo !== undefined && documentDateTo !== null) {
            queryParameters = queryParameters.set('documentDateTo', <any>documentDateTo.toISOString());
        }
        if (signDateFrom !== undefined && signDateFrom !== null) {
            queryParameters = queryParameters.set('signDateFrom', <any>signDateFrom.toISOString());
        }
        if (signDateTo !== undefined && signDateTo !== null) {
            queryParameters = queryParameters.set('signDateTo', <any>signDateTo.toISOString());
        }
        if (amountFrom !== undefined && amountFrom !== null) {
            queryParameters = queryParameters.set('amountFrom', <any>amountFrom);
        }
        if (amountTo !== undefined && amountTo !== null) {
            queryParameters = queryParameters.set('amountTo', <any>amountTo);
        }
        if (documentNumber !== undefined && documentNumber !== null) {
            queryParameters = queryParameters.set('documentNumber', <any>documentNumber);
        }
        if (version !== undefined && version !== null) {
            queryParameters = queryParameters.set('version', <any>version);
        }
        if (enabledInDateFrom !== undefined && enabledInDateFrom !== null) {
            queryParameters = queryParameters.set('enabledInDateFrom', <any>enabledInDateFrom.toISOString());
        }
        if (enabledInDateTo !== undefined && enabledInDateTo !== null) {
            queryParameters = queryParameters.set('enabledInDateTo', <any>enabledInDateTo.toISOString());
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<DocumentResultDTOContractDTO>(`${this.basePath}/v2/disposers/contracts`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get agreement with related documents by agreement id
     * 
     * @param contractId contractId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getContractUsingGET(contractId: number, observe?: 'body', reportProgress?: boolean): Observable<ContractWithSubdocumentsDTO>;
    public getContractUsingGET(contractId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ContractWithSubdocumentsDTO>>;
    public getContractUsingGET(contractId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ContractWithSubdocumentsDTO>>;
    public getContractUsingGET(contractId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (contractId === null || contractId === undefined) {
            throw new Error('Required parameter contractId was null or undefined when calling getContractUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<ContractWithSubdocumentsDTO>(`${this.basePath}/v2/disposers/contracts/${encodeURIComponent(String(contractId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Export acts to csv
     * 
     * @param edrpou edrpou
     * @param documentId Ідентифікатор документу
     * @param disposerId ЄДРПОУ розпорядника
     * @param contractorId ЄДРПОУ контрагента
     * @param currency Валюта
     * @param names Назва контрагента
     * @param documentDateFrom Діапазон пошуку за датою документа (дата з, включно)
     * @param documentDateTo Діапазон пошуку за датою документа (дата по, включно)
     * @param signDateFrom Діапазон пошуку за датою підпису документа (дата з, включно)
     * @param signDateTo Діапазон пошуку за датою підпису документа (дата по, включно)
     * @param amountFrom Діапазон пошуку по сумі (сума з, включно)
     * @param amountTo Діапазон пошуку по сумі (сума по, включно)
     * @param documentNumber Номер документу. При пошуку за номером документу необхідно вказати ЄДРПОУ розпорядника
     * @param version Наявність версій
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCsvActsUsingGET(edrpou: string, documentId?: Array<string>, disposerId?: Array<string>, contractorId?: Array<string>, currency?: Array<string>, names?: Array<string>, documentDateFrom?: Date, documentDateTo?: Date, signDateFrom?: Date, signDateTo?: Date, amountFrom?: number, amountTo?: number, documentNumber?: string, version?: boolean, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getCsvActsUsingGET(edrpou: string, documentId?: Array<string>, disposerId?: Array<string>, contractorId?: Array<string>, currency?: Array<string>, names?: Array<string>, documentDateFrom?: Date, documentDateTo?: Date, signDateFrom?: Date, signDateTo?: Date, amountFrom?: number, amountTo?: number, documentNumber?: string, version?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getCsvActsUsingGET(edrpou: string, documentId?: Array<string>, disposerId?: Array<string>, contractorId?: Array<string>, currency?: Array<string>, names?: Array<string>, documentDateFrom?: Date, documentDateTo?: Date, signDateFrom?: Date, signDateTo?: Date, amountFrom?: number, amountTo?: number, documentNumber?: string, version?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getCsvActsUsingGET(edrpou: string, documentId?: Array<string>, disposerId?: Array<string>, contractorId?: Array<string>, currency?: Array<string>, names?: Array<string>, documentDateFrom?: Date, documentDateTo?: Date, signDateFrom?: Date, signDateTo?: Date, amountFrom?: number, amountTo?: number, documentNumber?: string, version?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (edrpou === null || edrpou === undefined) {
            throw new Error('Required parameter edrpou was null or undefined when calling getCsvActsUsingGET.');
        }














        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (documentId) {
            documentId.forEach((element) => {
                queryParameters = queryParameters.append('documentId', <any>element);
            })
        }
        if (disposerId) {
            disposerId.forEach((element) => {
                queryParameters = queryParameters.append('disposerId', <any>element);
            })
        }
        if (contractorId) {
            contractorId.forEach((element) => {
                queryParameters = queryParameters.append('contractorId', <any>element);
            })
        }
        if (currency) {
            currency.forEach((element) => {
                queryParameters = queryParameters.append('currency', <any>element);
            })
        }
        if (names) {
            names.forEach((element) => {
                queryParameters = queryParameters.append('names', <any>element);
            })
        }
        if (documentDateFrom !== undefined && documentDateFrom !== null) {
            queryParameters = queryParameters.set('documentDateFrom', <any>documentDateFrom.toISOString());
        }
        if (documentDateTo !== undefined && documentDateTo !== null) {
            queryParameters = queryParameters.set('documentDateTo', <any>documentDateTo.toISOString());
        }
        if (signDateFrom !== undefined && signDateFrom !== null) {
            queryParameters = queryParameters.set('signDateFrom', <any>signDateFrom.toISOString());
        }
        if (signDateTo !== undefined && signDateTo !== null) {
            queryParameters = queryParameters.set('signDateTo', <any>signDateTo.toISOString());
        }
        if (amountFrom !== undefined && amountFrom !== null) {
            queryParameters = queryParameters.set('amountFrom', <any>amountFrom);
        }
        if (amountTo !== undefined && amountTo !== null) {
            queryParameters = queryParameters.set('amountTo', <any>amountTo);
        }
        if (documentNumber !== undefined && documentNumber !== null) {
            queryParameters = queryParameters.set('documentNumber', <any>documentNumber);
        }
        if (version !== undefined && version !== null) {
            queryParameters = queryParameters.set('version', <any>version);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/octet-stream'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/v2/disposers/acts/${encodeURIComponent(String(edrpou))}/csv`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Export addendums to csv
     * 
     * @param edrpou edrpou
     * @param documentId Ідентифікатор документу
     * @param disposerId ЄДРПОУ розпорядника
     * @param contractorId ЄДРПОУ контрагента
     * @param currency Валюта
     * @param names Назва контрагента
     * @param documentDateFrom Діапазон пошуку за датою документа (дата з, включно)
     * @param documentDateTo Діапазон пошуку за датою документа (дата по, включно)
     * @param signDateFrom Діапазон пошуку за датою підпису документа (дата з, включно)
     * @param signDateTo Діапазон пошуку за датою підпису документа (дата по, включно)
     * @param amountFrom Діапазон пошуку по сумі (сума з, включно)
     * @param amountTo Діапазон пошуку по сумі (сума по, включно)
     * @param documentNumber Номер документу. При пошуку за номером документу необхідно вказати ЄДРПОУ розпорядника
     * @param version Наявність версій
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCsvAddendumsUsingGET(edrpou: string, documentId?: Array<string>, disposerId?: Array<string>, contractorId?: Array<string>, currency?: Array<string>, names?: Array<string>, documentDateFrom?: Date, documentDateTo?: Date, signDateFrom?: Date, signDateTo?: Date, amountFrom?: number, amountTo?: number, documentNumber?: string, version?: boolean, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getCsvAddendumsUsingGET(edrpou: string, documentId?: Array<string>, disposerId?: Array<string>, contractorId?: Array<string>, currency?: Array<string>, names?: Array<string>, documentDateFrom?: Date, documentDateTo?: Date, signDateFrom?: Date, signDateTo?: Date, amountFrom?: number, amountTo?: number, documentNumber?: string, version?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getCsvAddendumsUsingGET(edrpou: string, documentId?: Array<string>, disposerId?: Array<string>, contractorId?: Array<string>, currency?: Array<string>, names?: Array<string>, documentDateFrom?: Date, documentDateTo?: Date, signDateFrom?: Date, signDateTo?: Date, amountFrom?: number, amountTo?: number, documentNumber?: string, version?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getCsvAddendumsUsingGET(edrpou: string, documentId?: Array<string>, disposerId?: Array<string>, contractorId?: Array<string>, currency?: Array<string>, names?: Array<string>, documentDateFrom?: Date, documentDateTo?: Date, signDateFrom?: Date, signDateTo?: Date, amountFrom?: number, amountTo?: number, documentNumber?: string, version?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (edrpou === null || edrpou === undefined) {
            throw new Error('Required parameter edrpou was null or undefined when calling getCsvAddendumsUsingGET.');
        }














        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (documentId) {
            documentId.forEach((element) => {
                queryParameters = queryParameters.append('documentId', <any>element);
            })
        }
        if (disposerId) {
            disposerId.forEach((element) => {
                queryParameters = queryParameters.append('disposerId', <any>element);
            })
        }
        if (contractorId) {
            contractorId.forEach((element) => {
                queryParameters = queryParameters.append('contractorId', <any>element);
            })
        }
        if (currency) {
            currency.forEach((element) => {
                queryParameters = queryParameters.append('currency', <any>element);
            })
        }
        if (names) {
            names.forEach((element) => {
                queryParameters = queryParameters.append('names', <any>element);
            })
        }
        if (documentDateFrom !== undefined && documentDateFrom !== null) {
            queryParameters = queryParameters.set('documentDateFrom', <any>documentDateFrom.toISOString());
        }
        if (documentDateTo !== undefined && documentDateTo !== null) {
            queryParameters = queryParameters.set('documentDateTo', <any>documentDateTo.toISOString());
        }
        if (signDateFrom !== undefined && signDateFrom !== null) {
            queryParameters = queryParameters.set('signDateFrom', <any>signDateFrom.toISOString());
        }
        if (signDateTo !== undefined && signDateTo !== null) {
            queryParameters = queryParameters.set('signDateTo', <any>signDateTo.toISOString());
        }
        if (amountFrom !== undefined && amountFrom !== null) {
            queryParameters = queryParameters.set('amountFrom', <any>amountFrom);
        }
        if (amountTo !== undefined && amountTo !== null) {
            queryParameters = queryParameters.set('amountTo', <any>amountTo);
        }
        if (documentNumber !== undefined && documentNumber !== null) {
            queryParameters = queryParameters.set('documentNumber', <any>documentNumber);
        }
        if (version !== undefined && version !== null) {
            queryParameters = queryParameters.set('version', <any>version);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/octet-stream'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/v2/disposers/addendums/${encodeURIComponent(String(edrpou))}/csv`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Export agreements of edrpou to csv
     * 
     * @param edrpou edrpou
     * @param documentId Ідентифікатор документу
     * @param disposerId ЄДРПОУ розпорядника
     * @param contractorId ЄДРПОУ контрагента
     * @param currency Валюта
     * @param names Назва контрагента
     * @param documentDateFrom Діапазон пошуку за датою документа (дата з, включно)
     * @param documentDateTo Діапазон пошуку за датою документа (дата по, включно)
     * @param signDateFrom Діапазон пошуку за датою підпису документа (дата з, включно)
     * @param signDateTo Діапазон пошуку за датою підпису документа (дата по, включно)
     * @param amountFrom Діапазон пошуку по сумі (сума з, включно)
     * @param amountTo Діапазон пошуку по сумі (сума по, включно)
     * @param documentNumber Номер документу. При пошуку за номером документу необхідно вказати ЄДРПОУ розпорядника
     * @param version Наявність версій
     * @param enabledInDateFrom Пошук за діапазоном дії договору (дата з, включно)
     * @param enabledInDateTo Пошук за діапазоном дії договору (дата по, включно)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCsvAgreementsUsingGET(edrpou: string, documentId?: Array<string>, disposerId?: Array<string>, contractorId?: Array<string>, currency?: Array<string>, names?: Array<string>, documentDateFrom?: Date, documentDateTo?: Date, signDateFrom?: Date, signDateTo?: Date, amountFrom?: number, amountTo?: number, documentNumber?: string, version?: boolean, enabledInDateFrom?: Date, enabledInDateTo?: Date, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getCsvAgreementsUsingGET(edrpou: string, documentId?: Array<string>, disposerId?: Array<string>, contractorId?: Array<string>, currency?: Array<string>, names?: Array<string>, documentDateFrom?: Date, documentDateTo?: Date, signDateFrom?: Date, signDateTo?: Date, amountFrom?: number, amountTo?: number, documentNumber?: string, version?: boolean, enabledInDateFrom?: Date, enabledInDateTo?: Date, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getCsvAgreementsUsingGET(edrpou: string, documentId?: Array<string>, disposerId?: Array<string>, contractorId?: Array<string>, currency?: Array<string>, names?: Array<string>, documentDateFrom?: Date, documentDateTo?: Date, signDateFrom?: Date, signDateTo?: Date, amountFrom?: number, amountTo?: number, documentNumber?: string, version?: boolean, enabledInDateFrom?: Date, enabledInDateTo?: Date, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getCsvAgreementsUsingGET(edrpou: string, documentId?: Array<string>, disposerId?: Array<string>, contractorId?: Array<string>, currency?: Array<string>, names?: Array<string>, documentDateFrom?: Date, documentDateTo?: Date, signDateFrom?: Date, signDateTo?: Date, amountFrom?: number, amountTo?: number, documentNumber?: string, version?: boolean, enabledInDateFrom?: Date, enabledInDateTo?: Date, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (edrpou === null || edrpou === undefined) {
            throw new Error('Required parameter edrpou was null or undefined when calling getCsvAgreementsUsingGET.');
        }
















        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (documentId) {
            documentId.forEach((element) => {
                queryParameters = queryParameters.append('documentId', <any>element);
            })
        }
        if (disposerId) {
            disposerId.forEach((element) => {
                queryParameters = queryParameters.append('disposerId', <any>element);
            })
        }
        if (contractorId) {
            contractorId.forEach((element) => {
                queryParameters = queryParameters.append('contractorId', <any>element);
            })
        }
        if (currency) {
            currency.forEach((element) => {
                queryParameters = queryParameters.append('currency', <any>element);
            })
        }
        if (names) {
            names.forEach((element) => {
                queryParameters = queryParameters.append('names', <any>element);
            })
        }
        if (documentDateFrom !== undefined && documentDateFrom !== null) {
            queryParameters = queryParameters.set('documentDateFrom', <any>documentDateFrom.toISOString());
        }
        if (documentDateTo !== undefined && documentDateTo !== null) {
            queryParameters = queryParameters.set('documentDateTo', <any>documentDateTo.toISOString());
        }
        if (signDateFrom !== undefined && signDateFrom !== null) {
            queryParameters = queryParameters.set('signDateFrom', <any>signDateFrom.toISOString());
        }
        if (signDateTo !== undefined && signDateTo !== null) {
            queryParameters = queryParameters.set('signDateTo', <any>signDateTo.toISOString());
        }
        if (amountFrom !== undefined && amountFrom !== null) {
            queryParameters = queryParameters.set('amountFrom', <any>amountFrom);
        }
        if (amountTo !== undefined && amountTo !== null) {
            queryParameters = queryParameters.set('amountTo', <any>amountTo);
        }
        if (documentNumber !== undefined && documentNumber !== null) {
            queryParameters = queryParameters.set('documentNumber', <any>documentNumber);
        }
        if (version !== undefined && version !== null) {
            queryParameters = queryParameters.set('version', <any>version);
        }
        if (enabledInDateFrom !== undefined && enabledInDateFrom !== null) {
            queryParameters = queryParameters.set('enabledInDateFrom', <any>enabledInDateFrom.toISOString());
        }
        if (enabledInDateTo !== undefined && enabledInDateTo !== null) {
            queryParameters = queryParameters.set('enabledInDateTo', <any>enabledInDateTo.toISOString());
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/octet-stream'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/v2/disposers/contracts/${encodeURIComponent(String(edrpou))}/csv`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Export peny to csv
     * 
     * @param edrpou edrpou
     * @param documentId Ідентифікатор документу
     * @param disposerId ЄДРПОУ розпорядника
     * @param contractorId ЄДРПОУ контрагента
     * @param currency Валюта
     * @param names Назва контрагента
     * @param documentDateFrom Діапазон пошуку за датою документа (дата з, включно)
     * @param documentDateTo Діапазон пошуку за датою документа (дата по, включно)
     * @param signDateFrom Діапазон пошуку за датою підпису документа (дата з, включно)
     * @param signDateTo Діапазон пошуку за датою підпису документа (дата по, включно)
     * @param amountFrom Діапазон пошуку по сумі (сума з, включно)
     * @param amountTo Діапазон пошуку по сумі (сума по, включно)
     * @param documentNumber Номер документу. При пошуку за номером документу необхідно вказати ЄДРПОУ розпорядника
     * @param version Наявність версій
     * @param enabledInDateFrom Пошук за діапазоном дії договору (дата з, включно)
     * @param enabledInDateTo Пошук за діапазоном дії договору (дата по, включно)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCsvPenyUsingGET(edrpou: string, documentId?: Array<string>, disposerId?: Array<string>, contractorId?: Array<string>, currency?: Array<string>, names?: Array<string>, documentDateFrom?: Date, documentDateTo?: Date, signDateFrom?: Date, signDateTo?: Date, amountFrom?: number, amountTo?: number, documentNumber?: string, version?: boolean, enabledInDateFrom?: Date, enabledInDateTo?: Date, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getCsvPenyUsingGET(edrpou: string, documentId?: Array<string>, disposerId?: Array<string>, contractorId?: Array<string>, currency?: Array<string>, names?: Array<string>, documentDateFrom?: Date, documentDateTo?: Date, signDateFrom?: Date, signDateTo?: Date, amountFrom?: number, amountTo?: number, documentNumber?: string, version?: boolean, enabledInDateFrom?: Date, enabledInDateTo?: Date, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getCsvPenyUsingGET(edrpou: string, documentId?: Array<string>, disposerId?: Array<string>, contractorId?: Array<string>, currency?: Array<string>, names?: Array<string>, documentDateFrom?: Date, documentDateTo?: Date, signDateFrom?: Date, signDateTo?: Date, amountFrom?: number, amountTo?: number, documentNumber?: string, version?: boolean, enabledInDateFrom?: Date, enabledInDateTo?: Date, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getCsvPenyUsingGET(edrpou: string, documentId?: Array<string>, disposerId?: Array<string>, contractorId?: Array<string>, currency?: Array<string>, names?: Array<string>, documentDateFrom?: Date, documentDateTo?: Date, signDateFrom?: Date, signDateTo?: Date, amountFrom?: number, amountTo?: number, documentNumber?: string, version?: boolean, enabledInDateFrom?: Date, enabledInDateTo?: Date, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (edrpou === null || edrpou === undefined) {
            throw new Error('Required parameter edrpou was null or undefined when calling getCsvPenyUsingGET.');
        }
















        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (documentId) {
            documentId.forEach((element) => {
                queryParameters = queryParameters.append('documentId', <any>element);
            })
        }
        if (disposerId) {
            disposerId.forEach((element) => {
                queryParameters = queryParameters.append('disposerId', <any>element);
            })
        }
        if (contractorId) {
            contractorId.forEach((element) => {
                queryParameters = queryParameters.append('contractorId', <any>element);
            })
        }
        if (currency) {
            currency.forEach((element) => {
                queryParameters = queryParameters.append('currency', <any>element);
            })
        }
        if (names) {
            names.forEach((element) => {
                queryParameters = queryParameters.append('names', <any>element);
            })
        }
        if (documentDateFrom !== undefined && documentDateFrom !== null) {
            queryParameters = queryParameters.set('documentDateFrom', <any>documentDateFrom.toISOString());
        }
        if (documentDateTo !== undefined && documentDateTo !== null) {
            queryParameters = queryParameters.set('documentDateTo', <any>documentDateTo.toISOString());
        }
        if (signDateFrom !== undefined && signDateFrom !== null) {
            queryParameters = queryParameters.set('signDateFrom', <any>signDateFrom.toISOString());
        }
        if (signDateTo !== undefined && signDateTo !== null) {
            queryParameters = queryParameters.set('signDateTo', <any>signDateTo.toISOString());
        }
        if (amountFrom !== undefined && amountFrom !== null) {
            queryParameters = queryParameters.set('amountFrom', <any>amountFrom);
        }
        if (amountTo !== undefined && amountTo !== null) {
            queryParameters = queryParameters.set('amountTo', <any>amountTo);
        }
        if (documentNumber !== undefined && documentNumber !== null) {
            queryParameters = queryParameters.set('documentNumber', <any>documentNumber);
        }
        if (version !== undefined && version !== null) {
            queryParameters = queryParameters.set('version', <any>version);
        }
        if (enabledInDateFrom !== undefined && enabledInDateFrom !== null) {
            queryParameters = queryParameters.set('enabledInDateFrom', <any>enabledInDateFrom.toISOString());
        }
        if (enabledInDateTo !== undefined && enabledInDateTo !== null) {
            queryParameters = queryParameters.set('enabledInDateTo', <any>enabledInDateTo.toISOString());
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/octet-stream'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/v2/disposers/peny/${encodeURIComponent(String(edrpou))}/csv`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Отримати файл з підписаними документами вказаного типу на вказану дату
     * 
     * @param date date
     * @param type type
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDataSnapshotUsingGET(date: string, type: 'UNDEFINED' | 'CONTRACT' | 'ADDENDUM' | 'ACT' | 'PENY' | 'DELETED', observe?: 'body', reportProgress?: boolean): Observable<ContractDTO>;
    public getDataSnapshotUsingGET(date: string, type: 'UNDEFINED' | 'CONTRACT' | 'ADDENDUM' | 'ACT' | 'PENY' | 'DELETED', observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ContractDTO>>;
    public getDataSnapshotUsingGET(date: string, type: 'UNDEFINED' | 'CONTRACT' | 'ADDENDUM' | 'ACT' | 'PENY' | 'DELETED', observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ContractDTO>>;
    public getDataSnapshotUsingGET(date: string, type: 'UNDEFINED' | 'CONTRACT' | 'ADDENDUM' | 'ACT' | 'PENY' | 'DELETED', observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (date === null || date === undefined) {
            throw new Error('Required parameter date was null or undefined when calling getDataSnapshotUsingGET.');
        }

        if (type === null || type === undefined) {
            throw new Error('Required parameter type was null or undefined when calling getDataSnapshotUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<ContractDTO>(`${this.basePath}/v2/disposers/snapshot/${encodeURIComponent(String(date))}/${encodeURIComponent(String(type))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get disposer
     * 
     * @param edrpou edrpou
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDataUsingGET(edrpou: string, observe?: 'body', reportProgress?: boolean): Observable<OrganizationDTO>;
    public getDataUsingGET(edrpou: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OrganizationDTO>>;
    public getDataUsingGET(edrpou: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OrganizationDTO>>;
    public getDataUsingGET(edrpou: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (edrpou === null || edrpou === undefined) {
            throw new Error('Required parameter edrpou was null or undefined when calling getDataUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<OrganizationDTO>(`${this.basePath}/v2/disposers/${encodeURIComponent(String(edrpou))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Завантажити csv розпорядників
     * 
     * @param regionIds 
     * @param edrpou 
     * @param organizationName 
     * @param kopfg 
     * @param orgEdrState 
     * @param hasCabinet 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDisposersCsvUsingGET(regionIds?: Array<number>, edrpou?: string, organizationName?: string, kopfg?: number, orgEdrState?: number, hasCabinet?: boolean, observe?: 'body', reportProgress?: boolean): Observable<InputStreamResource>;
    public getDisposersCsvUsingGET(regionIds?: Array<number>, edrpou?: string, organizationName?: string, kopfg?: number, orgEdrState?: number, hasCabinet?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InputStreamResource>>;
    public getDisposersCsvUsingGET(regionIds?: Array<number>, edrpou?: string, organizationName?: string, kopfg?: number, orgEdrState?: number, hasCabinet?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InputStreamResource>>;
    public getDisposersCsvUsingGET(regionIds?: Array<number>, edrpou?: string, organizationName?: string, kopfg?: number, orgEdrState?: number, hasCabinet?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {







        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (regionIds) {
            regionIds.forEach((element) => {
                queryParameters = queryParameters.append('regionIds', <any>element);
            })
        }
        if (edrpou !== undefined && edrpou !== null) {
            queryParameters = queryParameters.set('edrpou', <any>edrpou);
        }
        if (organizationName !== undefined && organizationName !== null) {
            queryParameters = queryParameters.set('organizationName', <any>organizationName);
        }
        if (kopfg !== undefined && kopfg !== null) {
            queryParameters = queryParameters.set('kopfg', <any>kopfg);
        }
        if (orgEdrState !== undefined && orgEdrState !== null) {
            queryParameters = queryParameters.set('orgEdrState', <any>orgEdrState);
        }
        if (hasCabinet !== undefined && hasCabinet !== null) {
            queryParameters = queryParameters.set('hasCabinet', <any>hasCabinet);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/octet-stream'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<InputStreamResource>(`${this.basePath}/v2/disposers/csv`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Повертає перелік згенерованих файлів
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getFilesListUsingGET(observe?: 'body', reportProgress?: boolean): Observable<Array<FileDTO>>;
    public getFilesListUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<FileDTO>>>;
    public getFilesListUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<FileDTO>>>;
    public getFilesListUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<FileDTO>>(`${this.basePath}/v2/disposers/files`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get peny by id
     * 
     * @param penyId penyId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPenaltyUsingGET(penyId: number, observe?: 'body', reportProgress?: boolean): Observable<PenyDTO>;
    public getPenaltyUsingGET(penyId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PenyDTO>>;
    public getPenaltyUsingGET(penyId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PenyDTO>>;
    public getPenaltyUsingGET(penyId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (penyId === null || penyId === undefined) {
            throw new Error('Required parameter penyId was null or undefined when calling getPenaltyUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<PenyDTO>(`${this.basePath}/v2/disposers/peny/${encodeURIComponent(String(penyId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get peny of edrpou
     * 
     * @param documentId Ідентифікатор документу
     * @param disposerId ЄДРПОУ розпорядника
     * @param contractorId ЄДРПОУ контрагента
     * @param currency Валюта
     * @param names Назва контрагента
     * @param documentDateFrom Діапазон пошуку за датою документа (дата з, включно)
     * @param documentDateTo Діапазон пошуку за датою документа (дата по, включно)
     * @param signDateFrom Діапазон пошуку за датою підпису документа (дата з, включно)
     * @param signDateTo Діапазон пошуку за датою підпису документа (дата по, включно)
     * @param amountFrom Діапазон пошуку по сумі (сума з, включно)
     * @param amountTo Діапазон пошуку по сумі (сума по, включно)
     * @param documentNumber Номер документу. При пошуку за номером документу необхідно вказати ЄДРПОУ розпорядника
     * @param version Наявність версій
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPenyUsingGET(documentId?: Array<string>, disposerId?: Array<string>, contractorId?: Array<string>, currency?: Array<string>, names?: Array<string>, documentDateFrom?: Date, documentDateTo?: Date, signDateFrom?: Date, signDateTo?: Date, amountFrom?: number, amountTo?: number, documentNumber?: string, version?: boolean, observe?: 'body', reportProgress?: boolean): Observable<DocumentResultDTOPenyDTO>;
    public getPenyUsingGET(documentId?: Array<string>, disposerId?: Array<string>, contractorId?: Array<string>, currency?: Array<string>, names?: Array<string>, documentDateFrom?: Date, documentDateTo?: Date, signDateFrom?: Date, signDateTo?: Date, amountFrom?: number, amountTo?: number, documentNumber?: string, version?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DocumentResultDTOPenyDTO>>;
    public getPenyUsingGET(documentId?: Array<string>, disposerId?: Array<string>, contractorId?: Array<string>, currency?: Array<string>, names?: Array<string>, documentDateFrom?: Date, documentDateTo?: Date, signDateFrom?: Date, signDateTo?: Date, amountFrom?: number, amountTo?: number, documentNumber?: string, version?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DocumentResultDTOPenyDTO>>;
    public getPenyUsingGET(documentId?: Array<string>, disposerId?: Array<string>, contractorId?: Array<string>, currency?: Array<string>, names?: Array<string>, documentDateFrom?: Date, documentDateTo?: Date, signDateFrom?: Date, signDateTo?: Date, amountFrom?: number, amountTo?: number, documentNumber?: string, version?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {














        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (documentId) {
            documentId.forEach((element) => {
                queryParameters = queryParameters.append('documentId', <any>element);
            })
        }
        if (disposerId) {
            disposerId.forEach((element) => {
                queryParameters = queryParameters.append('disposerId', <any>element);
            })
        }
        if (contractorId) {
            contractorId.forEach((element) => {
                queryParameters = queryParameters.append('contractorId', <any>element);
            })
        }
        if (currency) {
            currency.forEach((element) => {
                queryParameters = queryParameters.append('currency', <any>element);
            })
        }
        if (names) {
            names.forEach((element) => {
                queryParameters = queryParameters.append('names', <any>element);
            })
        }
        if (documentDateFrom !== undefined && documentDateFrom !== null) {
            queryParameters = queryParameters.set('documentDateFrom', <any>documentDateFrom.toISOString());
        }
        if (documentDateTo !== undefined && documentDateTo !== null) {
            queryParameters = queryParameters.set('documentDateTo', <any>documentDateTo.toISOString());
        }
        if (signDateFrom !== undefined && signDateFrom !== null) {
            queryParameters = queryParameters.set('signDateFrom', <any>signDateFrom.toISOString());
        }
        if (signDateTo !== undefined && signDateTo !== null) {
            queryParameters = queryParameters.set('signDateTo', <any>signDateTo.toISOString());
        }
        if (amountFrom !== undefined && amountFrom !== null) {
            queryParameters = queryParameters.set('amountFrom', <any>amountFrom);
        }
        if (amountTo !== undefined && amountTo !== null) {
            queryParameters = queryParameters.set('amountTo', <any>amountTo);
        }
        if (documentNumber !== undefined && documentNumber !== null) {
            queryParameters = queryParameters.set('documentNumber', <any>documentNumber);
        }
        if (version !== undefined && version !== null) {
            queryParameters = queryParameters.set('version', <any>version);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<DocumentResultDTOPenyDTO>(`${this.basePath}/v2/disposers/peny`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Запит History reports by ID
     * 
     * @param edrpou edrpou
     * @param docId docId
     * @param historyId historyId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getReporstHistoryListUsingGET(edrpou: string, docId: number, historyId: number, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public getReporstHistoryListUsingGET(edrpou: string, docId: number, historyId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public getReporstHistoryListUsingGET(edrpou: string, docId: number, historyId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public getReporstHistoryListUsingGET(edrpou: string, docId: number, historyId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (edrpou === null || edrpou === undefined) {
            throw new Error('Required parameter edrpou was null or undefined when calling getReporstHistoryListUsingGET.');
        }

        if (docId === null || docId === undefined) {
            throw new Error('Required parameter docId was null or undefined when calling getReporstHistoryListUsingGET.');
        }

        if (historyId === null || historyId === undefined) {
            throw new Error('Required parameter historyId was null or undefined when calling getReporstHistoryListUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<string>(`${this.basePath}/v2/disposers/${encodeURIComponent(String(edrpou))}/${encodeURIComponent(String(docId))}/history/${encodeURIComponent(String(historyId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Запит History reports by ID
     * 
     * @param edrpou edrpou
     * @param docId docId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getReporstHistoryListUsingGET1(edrpou: string, docId: number, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public getReporstHistoryListUsingGET1(edrpou: string, docId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public getReporstHistoryListUsingGET1(edrpou: string, docId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public getReporstHistoryListUsingGET1(edrpou: string, docId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (edrpou === null || edrpou === undefined) {
            throw new Error('Required parameter edrpou was null or undefined when calling getReporstHistoryListUsingGET1.');
        }

        if (docId === null || docId === undefined) {
            throw new Error('Required parameter docId was null or undefined when calling getReporstHistoryListUsingGET1.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<string>(`${this.basePath}/v2/disposers/${encodeURIComponent(String(edrpou))}/${encodeURIComponent(String(docId))}/history`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get signature details of Contract/Act/ect
     * 
     * @param checkSignReq checkSignReq
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getReportInfoUsingPOST(checkSignReq: CheckSignRequestDTO, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public getReportInfoUsingPOST(checkSignReq: CheckSignRequestDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public getReportInfoUsingPOST(checkSignReq: CheckSignRequestDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public getReportInfoUsingPOST(checkSignReq: CheckSignRequestDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (checkSignReq === null || checkSignReq === undefined) {
            throw new Error('Required parameter checkSignReq was null or undefined when calling getReportInfoUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<string>(`${this.basePath}/v2/disposers/documents/signinfo`,
            checkSignReq,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Статистика
     * 
     * @param edrpou edrpou
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getStatUsingGET(edrpou: string, observe?: 'body', reportProgress?: boolean): Observable<DisposerStatDTO>;
    public getStatUsingGET(edrpou: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DisposerStatDTO>>;
    public getStatUsingGET(edrpou: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DisposerStatDTO>>;
    public getStatUsingGET(edrpou: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (edrpou === null || edrpou === undefined) {
            throw new Error('Required parameter edrpou was null or undefined when calling getStatUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<DisposerStatDTO>(`${this.basePath}/v2/disposers/stat/${encodeURIComponent(String(edrpou))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Перевірка доступності API
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public pingUsingGET2(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public pingUsingGET2(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public pingUsingGET2(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public pingUsingGET2(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/v2/disposers/ping`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
