/**
 * API spending.gov.ua
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { CabinetRegDynamic } from '../model/cabinetRegDynamic';
import { DisposerStatDTO } from '../model/disposerStatDTO';
import { DocStat } from '../model/docStat';
import { EnterpriseStatistic } from '../model/enterpriseStatistic';
import { OrgStat } from '../model/orgStat';
import { RegionKopfgStat } from '../model/regionKopfgStat';
import { TransStatDTO } from '../model/transStatDTO';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class StatisticService {

    protected basePath = 'https://api.spending.gov.ua/api';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Повертає агреговану статистику трансакцій на порталі (загальна кількість/сума)
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public geAllStatUsingGET(observe?: 'body', reportProgress?: boolean): Observable<Array<TransStatDTO>>;
    public geAllStatUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TransStatDTO>>>;
    public geAllStatUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TransStatDTO>>>;
    public geAllStatUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<TransStatDTO>>(`${this.basePath}/v2/api/transactions/stat`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Повертає статистику кабінетів)
     * 
     * @param kopfg КОПФГ
     * @param regionId Регіон
     * @param page Номер сторінки
     * @param pageSize Кількість елементів на сторінці
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCabinetPageStatUsingGET(kopfg?: number, regionId?: number, page?: number, pageSize?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<EnterpriseStatistic>>;
    public getCabinetPageStatUsingGET(kopfg?: number, regionId?: number, page?: number, pageSize?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<EnterpriseStatistic>>>;
    public getCabinetPageStatUsingGET(kopfg?: number, regionId?: number, page?: number, pageSize?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<EnterpriseStatistic>>>;
    public getCabinetPageStatUsingGET(kopfg?: number, regionId?: number, page?: number, pageSize?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {





        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (kopfg !== undefined && kopfg !== null) {
            queryParameters = queryParameters.set('kopfg', <any>kopfg);
        }
        if (regionId !== undefined && regionId !== null) {
            queryParameters = queryParameters.set('regionId', <any>regionId);
        }
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters = queryParameters.set('pageSize', <any>pageSize);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<EnterpriseStatistic>>(`${this.basePath}/v2/stat/cabinet`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Повертає статистику документів організацій на порталі
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCsvStatsUsingGET(observe?: 'body', reportProgress?: boolean): Observable<Array<OrgStat>>;
    public getCsvStatsUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<OrgStat>>>;
    public getCsvStatsUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<OrgStat>>>;
    public getCsvStatsUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/octet-stream'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<OrgStat>>(`${this.basePath}/v2/stat/organizations/csv`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Повертає агреговану статистику трансакцій на порталі (загальна кількість/сума) за поточний місяць
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCurrMonthStatUsingGET(observe?: 'body', reportProgress?: boolean): Observable<Array<TransStatDTO>>;
    public getCurrMonthStatUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TransStatDTO>>>;
    public getCurrMonthStatUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TransStatDTO>>>;
    public getCurrMonthStatUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<TransStatDTO>>(`${this.basePath}/v2/api/transactions/stat/month`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Повертає агреговану статистику трансакцій на порталі (загальна кількість/сума) за поточный рік
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCurrYearStatUsingGET(observe?: 'body', reportProgress?: boolean): Observable<Array<TransStatDTO>>;
    public getCurrYearStatUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TransStatDTO>>>;
    public getCurrYearStatUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TransStatDTO>>>;
    public getCurrYearStatUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<TransStatDTO>>(`${this.basePath}/v2/api/transactions/stat/year`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Повертає агреговану статистику документів на порталі (загальна кількість/кількість оприлюднених)
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDocStatUsingGET(observe?: 'body', reportProgress?: boolean): Observable<Array<DocStat>>;
    public getDocStatUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<DocStat>>>;
    public getDocStatUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<DocStat>>>;
    public getDocStatUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<DocStat>>(`${this.basePath}/v2/stat/documents`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Повертає динаміку реєстрації кабінетів
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDynamicsByPeriodsUsingGET(observe?: 'body', reportProgress?: boolean): Observable<Array<CabinetRegDynamic>>;
    public getDynamicsByPeriodsUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<CabinetRegDynamic>>>;
    public getDynamicsByPeriodsUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<CabinetRegDynamic>>>;
    public getDynamicsByPeriodsUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<CabinetRegDynamic>>(`${this.basePath}/v2/stat/dynamics`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Повертає агреговану статистику за КОАТУУ та КОПФГ
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getKopfgStatUsingGET(observe?: 'body', reportProgress?: boolean): Observable<Array<RegionKopfgStat>>;
    public getKopfgStatUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<RegionKopfgStat>>>;
    public getKopfgStatUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<RegionKopfgStat>>>;
    public getKopfgStatUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<RegionKopfgStat>>(`${this.basePath}/v2/stat/kopfg`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Статистика
     * 
     * @param edrpou edrpou
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getStatUsingGET(edrpou: string, observe?: 'body', reportProgress?: boolean): Observable<DisposerStatDTO>;
    public getStatUsingGET(edrpou: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DisposerStatDTO>>;
    public getStatUsingGET(edrpou: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DisposerStatDTO>>;
    public getStatUsingGET(edrpou: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (edrpou === null || edrpou === undefined) {
            throw new Error('Required parameter edrpou was null or undefined when calling getStatUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<DisposerStatDTO>(`${this.basePath}/v2/disposers/stat/${encodeURIComponent(String(edrpou))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Перевірка доступності API
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public pingUsingGET10(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public pingUsingGET10(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public pingUsingGET10(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public pingUsingGET10(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/v2/api/transactions/stat/ping`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Перевірка доступності API
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public pingUsingGET7(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public pingUsingGET7(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public pingUsingGET7(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public pingUsingGET7(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/v2/stat/ping`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
