/**
 * API spending.gov.ua
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { CheckSignRequestDTO } from '../model/checkSignRequestDTO';
import { ReportApiCodeDto } from '../model/reportApiCodeDto';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class ReportsService {

    protected basePath = 'https://api.spending.gov.ua/api';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Довідник кодів колонок/рядків звітів
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public codesUsingGET(observe?: 'body', reportProgress?: boolean): Observable<ReportApiCodeDto>;
    public codesUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ReportApiCodeDto>>;
    public codesUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ReportApiCodeDto>>;
    public codesUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<ReportApiCodeDto>(`${this.basePath}/v2/api/reports/asynch/codes`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Запит звіту за ЄДРПОУ, типом звіту та періодом
     * 
     * @param edrpou ЕДРПОУ
     * @param reportTypeId Тип звіту
     * @param periodId Період звіту
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findAsynchUsingGET(edrpou?: string, reportTypeId?: number, periodId?: number, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public findAsynchUsingGET(edrpou?: string, reportTypeId?: number, periodId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public findAsynchUsingGET(edrpou?: string, reportTypeId?: number, periodId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public findAsynchUsingGET(edrpou?: string, reportTypeId?: number, periodId?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (edrpou !== undefined && edrpou !== null) {
            queryParameters = queryParameters.set('edrpou', <any>edrpou);
        }
        if (reportTypeId !== undefined && reportTypeId !== null) {
            queryParameters = queryParameters.set('reportTypeId', <any>reportTypeId);
        }
        if (periodId !== undefined && periodId !== null) {
            queryParameters = queryParameters.set('periodId', <any>periodId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<string>(`${this.basePath}/v2/api/reports/asynch`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Запит вилучених звітів за дату
     * 
     * @param date Дата вилучення
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findByDeletedDateUsingGET(date: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public findByDeletedDateUsingGET(date: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public findByDeletedDateUsingGET(date: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public findByDeletedDateUsingGET(date: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (date === null || date === undefined) {
            throw new Error('Required parameter date was null or undefined when calling findByDeletedDateUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<string>(`${this.basePath}/v2/api/reports/asynch/deleted/${encodeURIComponent(String(date))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Запит звітів за датою оприлюднення
     * 
     * @param date Дата оприлюднення
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findBySignDateUsingGET(date: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public findBySignDateUsingGET(date: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public findBySignDateUsingGET(date: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public findBySignDateUsingGET(date: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (date === null || date === undefined) {
            throw new Error('Required parameter date was null or undefined when calling findBySignDateUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<string>(`${this.basePath}/v2/api/reports/asynch/date/${encodeURIComponent(String(date))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Отримання результату запиту за віжповідним токеном
     * 
     * @param token token
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAsynchUsingGET(token: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public getAsynchUsingGET(token: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public getAsynchUsingGET(token: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public getAsynchUsingGET(token: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (token === null || token === undefined) {
            throw new Error('Required parameter token was null or undefined when calling getAsynchUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/octet-stream'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<string>(`${this.basePath}/v2/api/reports/asynch/result/${encodeURIComponent(String(token))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Запит reports
     * 
     * @param edrpou edrpou
     * @param reportTypeId 
     * @param periodIds 
     * @param edrpou2 
     * @param budget 
     * @param fund 
     * @param vidClassCode 
     * @param progClassCode 
     * @param signDateFrom 
     * @param signDateTo 
     * @param createDateFrom 
     * @param createDateTo 
     * @param signStatus 
     * @param page 
     * @param size 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCsvUsingGET(edrpou: string, reportTypeId?: Array<number>, periodIds?: Array<number>, edrpou2?: string, budget?: string, fund?: string, vidClassCode?: string, progClassCode?: string, signDateFrom?: Date, signDateTo?: Date, createDateFrom?: Date, createDateTo?: Date, signStatus?: 'signed' | 'resigned' | 'oneshot', page?: number, size?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getCsvUsingGET(edrpou: string, reportTypeId?: Array<number>, periodIds?: Array<number>, edrpou2?: string, budget?: string, fund?: string, vidClassCode?: string, progClassCode?: string, signDateFrom?: Date, signDateTo?: Date, createDateFrom?: Date, createDateTo?: Date, signStatus?: 'signed' | 'resigned' | 'oneshot', page?: number, size?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getCsvUsingGET(edrpou: string, reportTypeId?: Array<number>, periodIds?: Array<number>, edrpou2?: string, budget?: string, fund?: string, vidClassCode?: string, progClassCode?: string, signDateFrom?: Date, signDateTo?: Date, createDateFrom?: Date, createDateTo?: Date, signStatus?: 'signed' | 'resigned' | 'oneshot', page?: number, size?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getCsvUsingGET(edrpou: string, reportTypeId?: Array<number>, periodIds?: Array<number>, edrpou2?: string, budget?: string, fund?: string, vidClassCode?: string, progClassCode?: string, signDateFrom?: Date, signDateTo?: Date, createDateFrom?: Date, createDateTo?: Date, signStatus?: 'signed' | 'resigned' | 'oneshot', page?: number, size?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (edrpou === null || edrpou === undefined) {
            throw new Error('Required parameter edrpou was null or undefined when calling getCsvUsingGET.');
        }















        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (reportTypeId) {
            reportTypeId.forEach((element) => {
                queryParameters = queryParameters.append('reportTypeId', <any>element);
            })
        }
        if (periodIds) {
            periodIds.forEach((element) => {
                queryParameters = queryParameters.append('periodIds', <any>element);
            })
        }
        if (edrpou2 !== undefined && edrpou2 !== null) {
            queryParameters = queryParameters.set('edrpou', <any>edrpou2);
        }
        if (budget !== undefined && budget !== null) {
            queryParameters = queryParameters.set('budget', <any>budget);
        }
        if (fund !== undefined && fund !== null) {
            queryParameters = queryParameters.set('fund', <any>fund);
        }
        if (vidClassCode !== undefined && vidClassCode !== null) {
            queryParameters = queryParameters.set('vidClassCode', <any>vidClassCode);
        }
        if (progClassCode !== undefined && progClassCode !== null) {
            queryParameters = queryParameters.set('progClassCode', <any>progClassCode);
        }
        if (signDateFrom !== undefined && signDateFrom !== null) {
            queryParameters = queryParameters.set('signDateFrom', <any>signDateFrom.toISOString());
        }
        if (signDateTo !== undefined && signDateTo !== null) {
            queryParameters = queryParameters.set('signDateTo', <any>signDateTo.toISOString());
        }
        if (createDateFrom !== undefined && createDateFrom !== null) {
            queryParameters = queryParameters.set('createDateFrom', <any>createDateFrom.toISOString());
        }
        if (createDateTo !== undefined && createDateTo !== null) {
            queryParameters = queryParameters.set('createDateTo', <any>createDateTo.toISOString());
        }
        if (signStatus !== undefined && signStatus !== null) {
            queryParameters = queryParameters.set('signStatus', <any>signStatus);
        }
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (size !== undefined && size !== null) {
            queryParameters = queryParameters.set('size', <any>size);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/v2/api/reports/${encodeURIComponent(String(edrpou))}/csv/`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Запит reports
     * 
     * @param periodId periodId
     * @param budget budget
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getKpkUsingGET(periodId?: number, budget?: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public getKpkUsingGET(periodId?: number, budget?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public getKpkUsingGET(periodId?: number, budget?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public getKpkUsingGET(periodId?: number, budget?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (periodId !== undefined && periodId !== null) {
            queryParameters = queryParameters.set('periodId', <any>periodId);
        }
        if (budget !== undefined && budget !== null) {
            queryParameters = queryParameters.set('budget', <any>budget);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<string>(`${this.basePath}/v2/api/reports/kpk/`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Запит reports
     * 
     * @param periodId periodId
     * @param budget budget
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getKvkUsingGET(periodId?: number, budget?: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public getKvkUsingGET(periodId?: number, budget?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public getKvkUsingGET(periodId?: number, budget?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public getKvkUsingGET(periodId?: number, budget?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (periodId !== undefined && periodId !== null) {
            queryParameters = queryParameters.set('periodId', <any>periodId);
        }
        if (budget !== undefined && budget !== null) {
            queryParameters = queryParameters.set('budget', <any>budget);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<string>(`${this.basePath}/v2/api/reports/kvk/`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Запит reports
     * 
     * @param edrpou edrpou
     * @param reportTypeId 
     * @param periodIds 
     * @param edrpou2 
     * @param budget 
     * @param fund 
     * @param vidClassCode 
     * @param progClassCode 
     * @param signDateFrom 
     * @param signDateTo 
     * @param createDateFrom 
     * @param createDateTo 
     * @param signStatus 
     * @param page 
     * @param size 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPageUsingGET(edrpou: string, reportTypeId?: Array<number>, periodIds?: Array<number>, edrpou2?: string, budget?: string, fund?: string, vidClassCode?: string, progClassCode?: string, signDateFrom?: Date, signDateTo?: Date, createDateFrom?: Date, createDateTo?: Date, signStatus?: 'signed' | 'resigned' | 'oneshot', page?: number, size?: number, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public getPageUsingGET(edrpou: string, reportTypeId?: Array<number>, periodIds?: Array<number>, edrpou2?: string, budget?: string, fund?: string, vidClassCode?: string, progClassCode?: string, signDateFrom?: Date, signDateTo?: Date, createDateFrom?: Date, createDateTo?: Date, signStatus?: 'signed' | 'resigned' | 'oneshot', page?: number, size?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public getPageUsingGET(edrpou: string, reportTypeId?: Array<number>, periodIds?: Array<number>, edrpou2?: string, budget?: string, fund?: string, vidClassCode?: string, progClassCode?: string, signDateFrom?: Date, signDateTo?: Date, createDateFrom?: Date, createDateTo?: Date, signStatus?: 'signed' | 'resigned' | 'oneshot', page?: number, size?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public getPageUsingGET(edrpou: string, reportTypeId?: Array<number>, periodIds?: Array<number>, edrpou2?: string, budget?: string, fund?: string, vidClassCode?: string, progClassCode?: string, signDateFrom?: Date, signDateTo?: Date, createDateFrom?: Date, createDateTo?: Date, signStatus?: 'signed' | 'resigned' | 'oneshot', page?: number, size?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (edrpou === null || edrpou === undefined) {
            throw new Error('Required parameter edrpou was null or undefined when calling getPageUsingGET.');
        }















        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (reportTypeId) {
            reportTypeId.forEach((element) => {
                queryParameters = queryParameters.append('reportTypeId', <any>element);
            })
        }
        if (periodIds) {
            periodIds.forEach((element) => {
                queryParameters = queryParameters.append('periodIds', <any>element);
            })
        }
        if (edrpou2 !== undefined && edrpou2 !== null) {
            queryParameters = queryParameters.set('edrpou', <any>edrpou2);
        }
        if (budget !== undefined && budget !== null) {
            queryParameters = queryParameters.set('budget', <any>budget);
        }
        if (fund !== undefined && fund !== null) {
            queryParameters = queryParameters.set('fund', <any>fund);
        }
        if (vidClassCode !== undefined && vidClassCode !== null) {
            queryParameters = queryParameters.set('vidClassCode', <any>vidClassCode);
        }
        if (progClassCode !== undefined && progClassCode !== null) {
            queryParameters = queryParameters.set('progClassCode', <any>progClassCode);
        }
        if (signDateFrom !== undefined && signDateFrom !== null) {
            queryParameters = queryParameters.set('signDateFrom', <any>signDateFrom.toISOString());
        }
        if (signDateTo !== undefined && signDateTo !== null) {
            queryParameters = queryParameters.set('signDateTo', <any>signDateTo.toISOString());
        }
        if (createDateFrom !== undefined && createDateFrom !== null) {
            queryParameters = queryParameters.set('createDateFrom', <any>createDateFrom.toISOString());
        }
        if (createDateTo !== undefined && createDateTo !== null) {
            queryParameters = queryParameters.set('createDateTo', <any>createDateTo.toISOString());
        }
        if (signStatus !== undefined && signStatus !== null) {
            queryParameters = queryParameters.set('signStatus', <any>signStatus);
        }
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (size !== undefined && size !== null) {
            queryParameters = queryParameters.set('size', <any>size);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<string>(`${this.basePath}/v2/api/reports/${encodeURIComponent(String(edrpou))}/page`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Довідник звітних періодів
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPeriodsUsingGET(observe?: 'body', reportProgress?: boolean): Observable<string>;
    public getPeriodsUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public getPeriodsUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public getPeriodsUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<string>(`${this.basePath}/v2/api/reports/asynch/periods`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Запит reports
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPeriodsUsingGET1(observe?: 'body', reportProgress?: boolean): Observable<string>;
    public getPeriodsUsingGET1(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public getPeriodsUsingGET1(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public getPeriodsUsingGET1(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<string>(`${this.basePath}/v2/api/reports/periods/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Запит History reports by ID
     * 
     * @param edrpou edrpou
     * @param docId docId
     * @param historyId historyId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getReporstHistoryListUsingGET(edrpou: string, docId: number, historyId: number, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public getReporstHistoryListUsingGET(edrpou: string, docId: number, historyId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public getReporstHistoryListUsingGET(edrpou: string, docId: number, historyId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public getReporstHistoryListUsingGET(edrpou: string, docId: number, historyId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (edrpou === null || edrpou === undefined) {
            throw new Error('Required parameter edrpou was null or undefined when calling getReporstHistoryListUsingGET.');
        }

        if (docId === null || docId === undefined) {
            throw new Error('Required parameter docId was null or undefined when calling getReporstHistoryListUsingGET.');
        }

        if (historyId === null || historyId === undefined) {
            throw new Error('Required parameter historyId was null or undefined when calling getReporstHistoryListUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<string>(`${this.basePath}/v2/disposers/${encodeURIComponent(String(edrpou))}/${encodeURIComponent(String(docId))}/history/${encodeURIComponent(String(historyId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Запит History reports by ID
     * 
     * @param edrpou edrpou
     * @param docId docId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getReporstHistoryListUsingGET1(edrpou: string, docId: number, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public getReporstHistoryListUsingGET1(edrpou: string, docId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public getReporstHistoryListUsingGET1(edrpou: string, docId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public getReporstHistoryListUsingGET1(edrpou: string, docId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (edrpou === null || edrpou === undefined) {
            throw new Error('Required parameter edrpou was null or undefined when calling getReporstHistoryListUsingGET1.');
        }

        if (docId === null || docId === undefined) {
            throw new Error('Required parameter docId was null or undefined when calling getReporstHistoryListUsingGET1.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<string>(`${this.basePath}/v2/disposers/${encodeURIComponent(String(edrpou))}/${encodeURIComponent(String(docId))}/history`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Запит History reports by ID
     * 
     * @param disposer disposer
     * @param reportId reportId
     * @param historyId historyId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getReporstHistoryListUsingGET2(disposer: string, reportId: number, historyId: number, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public getReporstHistoryListUsingGET2(disposer: string, reportId: number, historyId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public getReporstHistoryListUsingGET2(disposer: string, reportId: number, historyId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public getReporstHistoryListUsingGET2(disposer: string, reportId: number, historyId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (disposer === null || disposer === undefined) {
            throw new Error('Required parameter disposer was null or undefined when calling getReporstHistoryListUsingGET2.');
        }

        if (reportId === null || reportId === undefined) {
            throw new Error('Required parameter reportId was null or undefined when calling getReporstHistoryListUsingGET2.');
        }

        if (historyId === null || historyId === undefined) {
            throw new Error('Required parameter historyId was null or undefined when calling getReporstHistoryListUsingGET2.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<string>(`${this.basePath}/v2/api/reports/${encodeURIComponent(String(disposer))}/${encodeURIComponent(String(reportId))}/history/${encodeURIComponent(String(historyId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Запит History reports by ID
     * 
     * @param disposer disposer
     * @param reportId reportId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getReporstHistoryListUsingGET3(disposer: string, reportId: number, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public getReporstHistoryListUsingGET3(disposer: string, reportId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public getReporstHistoryListUsingGET3(disposer: string, reportId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public getReporstHistoryListUsingGET3(disposer: string, reportId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (disposer === null || disposer === undefined) {
            throw new Error('Required parameter disposer was null or undefined when calling getReporstHistoryListUsingGET3.');
        }

        if (reportId === null || reportId === undefined) {
            throw new Error('Required parameter reportId was null or undefined when calling getReporstHistoryListUsingGET3.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<string>(`${this.basePath}/v2/api/reports/${encodeURIComponent(String(disposer))}/${encodeURIComponent(String(reportId))}/history`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get signature details of Report
     * 
     * @param checkSignReq checkSignReq
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getReportInfoUsingPOST1(checkSignReq: CheckSignRequestDTO, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public getReportInfoUsingPOST1(checkSignReq: CheckSignRequestDTO, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public getReportInfoUsingPOST1(checkSignReq: CheckSignRequestDTO, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public getReportInfoUsingPOST1(checkSignReq: CheckSignRequestDTO, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (checkSignReq === null || checkSignReq === undefined) {
            throw new Error('Required parameter checkSignReq was null or undefined when calling getReportInfoUsingPOST1.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<string>(`${this.basePath}/v2/api/reports/signinfo`,
            checkSignReq,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Запит reports
     * 
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getReportTypeUsingGET(id: number, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public getReportTypeUsingGET(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public getReportTypeUsingGET(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public getReportTypeUsingGET(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getReportTypeUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<string>(`${this.basePath}/v2/api/reports/report_types/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Запит reports
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getReportTypesUsingGET(observe?: 'body', reportProgress?: boolean): Observable<string>;
    public getReportTypesUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public getReportTypesUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public getReportTypesUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<string>(`${this.basePath}/v2/api/reports/report_types/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Запит reports by ID
     * 
     * @param disposer disposer
     * @param reportId reportId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getReportUsingGET(disposer: string, reportId: number, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public getReportUsingGET(disposer: string, reportId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public getReportUsingGET(disposer: string, reportId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public getReportUsingGET(disposer: string, reportId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (disposer === null || disposer === undefined) {
            throw new Error('Required parameter disposer was null or undefined when calling getReportUsingGET.');
        }

        if (reportId === null || reportId === undefined) {
            throw new Error('Required parameter reportId was null or undefined when calling getReportUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<string>(`${this.basePath}/v2/api/reports/${encodeURIComponent(String(disposer))}/${encodeURIComponent(String(reportId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Запит транcакцій (page)
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public pingUsingGET6(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public pingUsingGET6(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public pingUsingGET6(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public pingUsingGET6(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/v2/api/reports/ping`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
