/**
 * API spending.gov.ua
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { ContractorType } from '../model/contractorType';
import { Country } from '../model/country';
import { DkppDict } from '../model/dkppDict';
import { KvedDict } from '../model/kvedDict';
import { OrganizationTypesDict } from '../model/organizationTypesDict';
import { Procurement } from '../model/procurement';
import { Regions } from '../model/regions';
import { ShortAddressDTO } from '../model/shortAddressDTO';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class DictionariesService {

    protected basePath = 'https://api.spending.gov.ua/api';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Повертає адресу за КОАТУУ
     * 
     * @param koatuu koatuu
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAddressByKoatuuUsingGET(koatuu: string, observe?: 'body', reportProgress?: boolean): Observable<ShortAddressDTO>;
    public getAddressByKoatuuUsingGET(koatuu: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ShortAddressDTO>>;
    public getAddressByKoatuuUsingGET(koatuu: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ShortAddressDTO>>;
    public getAddressByKoatuuUsingGET(koatuu: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (koatuu === null || koatuu === undefined) {
            throw new Error('Required parameter koatuu was null or undefined when calling getAddressByKoatuuUsingGET.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (koatuu !== undefined && koatuu !== null) {
            queryParameters = queryParameters.set('koatuu', <any>koatuu);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<ShortAddressDTO>(`${this.basePath}/v2/dictionaries/koatuu`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Повертає довідник типів контрагентів
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getContractorTypesUsingGET(observe?: 'body', reportProgress?: boolean): Observable<Array<ContractorType>>;
    public getContractorTypesUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ContractorType>>>;
    public getContractorTypesUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ContractorType>>>;
    public getContractorTypesUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<ContractorType>>(`${this.basePath}/v2/dictionaries/contractors`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Повертає довідник країн
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCountriesUsingGET(observe?: 'body', reportProgress?: boolean): Observable<Array<Country>>;
    public getCountriesUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Country>>>;
    public getCountriesUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Country>>>;
    public getCountriesUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Country>>(`${this.basePath}/v2/dictionaries/countries`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Повертає довідник валют
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCurrencyListUsingGET(observe?: 'body', reportProgress?: boolean): Observable<Array<Country>>;
    public getCurrencyListUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Country>>>;
    public getCurrencyListUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Country>>>;
    public getCurrencyListUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Country>>(`${this.basePath}/v2/dictionaries/currency`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Повертає довідник ДКПП
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDkppUsingGET(observe?: 'body', reportProgress?: boolean): Observable<Array<DkppDict>>;
    public getDkppUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<DkppDict>>>;
    public getDkppUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<DkppDict>>>;
    public getDkppUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<DkppDict>>(`${this.basePath}/v2/dictionaries/dkpp`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Повертає довідник регіонів
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDksuDepartmentsUsingGET(observe?: 'body', reportProgress?: boolean): Observable<Array<Regions>>;
    public getDksuDepartmentsUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Regions>>>;
    public getDksuDepartmentsUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Regions>>>;
    public getDksuDepartmentsUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Regions>>(`${this.basePath}/v2/dictionaries/DKSUdepartments`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Повертає КВЕД
     * 
     * @param exactKved exactKved
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getExactKvedUsingGET(exactKved: string, observe?: 'body', reportProgress?: boolean): Observable<KvedDict>;
    public getExactKvedUsingGET(exactKved: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<KvedDict>>;
    public getExactKvedUsingGET(exactKved: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<KvedDict>>;
    public getExactKvedUsingGET(exactKved: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (exactKved === null || exactKved === undefined) {
            throw new Error('Required parameter exactKved was null or undefined when calling getExactKvedUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<KvedDict>(`${this.basePath}/v2/dictionaries/kved/${encodeURIComponent(String(exactKved))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Повертає довідник КОПФГ
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getKopfgUsingGET(observe?: 'body', reportProgress?: boolean): Observable<Array<KvedDict>>;
    public getKopfgUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<KvedDict>>>;
    public getKopfgUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<KvedDict>>>;
    public getKopfgUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<KvedDict>>(`${this.basePath}/v2/dictionaries/kopfg`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Повертає довідник КВЕД
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getKvedUsingGET(observe?: 'body', reportProgress?: boolean): Observable<Array<KvedDict>>;
    public getKvedUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<KvedDict>>>;
    public getKvedUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<KvedDict>>>;
    public getKvedUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<KvedDict>>(`${this.basePath}/v2/dictionaries/kved`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Повертає довідник типів організацій
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getOrgTypesUsingGET(observe?: 'body', reportProgress?: boolean): Observable<Array<OrganizationTypesDict>>;
    public getOrgTypesUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<OrganizationTypesDict>>>;
    public getOrgTypesUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<OrganizationTypesDict>>>;
    public getOrgTypesUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<OrganizationTypesDict>>(`${this.basePath}/v2/dictionaries/organizationtypes`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Повертає довідник CPV
     * 
     * @param lang lang
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getProcurementDictionaryUsingGET(lang?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Procurement>>;
    public getProcurementDictionaryUsingGET(lang?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Procurement>>>;
    public getProcurementDictionaryUsingGET(lang?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Procurement>>>;
    public getProcurementDictionaryUsingGET(lang?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (lang !== undefined && lang !== null) {
            queryParameters = queryParameters.set('lang', <any>lang);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Procurement>>(`${this.basePath}/v2/dictionaries/procurement`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Повертає довідник регіонів
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getRegionsUsingGET(observe?: 'body', reportProgress?: boolean): Observable<Array<Regions>>;
    public getRegionsUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Regions>>>;
    public getRegionsUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Regions>>>;
    public getRegionsUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Regions>>(`${this.basePath}/v2/dictionaries/regions`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Перевірка доступності API
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public pingUsingGET1(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public pingUsingGET1(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public pingUsingGET1(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public pingUsingGET1(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/v2/dictionaries/ping`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
